
name: ${{ parameters.VersionNumberMajor }}.${{ parameters.VersionNumberMinor }}$(Rev:.rrrr)

parameters:
- name: VersionNumberMajor
  displayName: 'Version Number : Major'
  type: string
  default: '0'  
- name: VersionNumberMinor
  displayName: 'Version Number : Minor'
  type: string
  default: '0'  

#resources:
#- repo: self
#  fetchDepth: 15

#variables:
#- name: VersionNumberMajor 
#  value: '0'
#- name: VersionNumberMinor 
#  value: '1'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build    
    variables:
      "Build.Configuration": 'Release'
      "Build.Platform": 'Any CPU'
      "Build.PlatformX64": 'x64'  
      "Nuget.Feed": 'dct-pkg'  
      "Nuget.Version": '5.8.0'
      "DotnetCore.Version": '2.2.x'
      "Solution": 'src\**\*.sln'
      "SF.ProjectName": '**\*.sfproj'      

    pool:
      name: DCT
      demands:
      - IsBuildServer
      - ServiceFabricSDK
      
    steps:
#********************************************************************************
# Copy Application Parameters Local Node xml files
#********************************************************************************   
    - powershell: |
           $Filter = "ApplicationParameters";
           $ApplicationParametersFolder = Get-ChildItem -Directory -recurse   | Where {$_.Name.ToLower() -eq $Filter.ToLower() };
           Copy-Item "$($ApplicationParametersFolder.FullName)\Cloud.xml" "$($ApplicationParametersFolder.FullName)\Local.1Node.xml" -Force;
           Copy-Item "$($ApplicationParametersFolder.FullName)\Cloud.xml" "$($ApplicationParametersFolder.FullName)\Local.5Node.xml" -Force;
 
      workingDirectory: '$(build.sourcesdirectory)\src'
      displayName: 'Generate Fake Application Parameters Node Config Files'
#********************************************************************************
# Install and setup tools needed
#********************************************************************************   

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk : $(DotnetCore.Version)'
      inputs:
        packageType: sdk
        version: $(DotnetCore.Version)
    
    - task: VisualStudioTestPlatformInstaller@1
      displayName: 'Visual Studio Test Platform Installer'
      inputs:
        versionSelector: latestStable
    
    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet : $(Nuget.Version)'
      inputs:
        versionSpec: '>= $(Nuget.Version)'
        checkLatest: true
    
#********************************************************************************
# Restore & Build Projects/Solutiosn
#********************************************************************************   
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '**\*.csproj'
        vstsFeed: '$(Nuget.Feed)'
    
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '**/*.sln'
        vstsFeed: '$(Nuget.Feed)'
    
    - task: MSBuild@1
      displayName: 'Build solution **/*.sln'
      inputs:
        msbuildArchitecture: x64
        solution: '$(Solution)'
        platform: '$(Build.Platform)'
        configuration: '$(Build.Configuration)'
        msbuildArguments: '-p:version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber) -p:SkipInvalidConfigurations=true'
        clean: true
        maximumCpuCount: true
        restoreNugetPackages: false
        logProjectEvents: true
        createLogFile: true
    
    - task: MSBuild@1
      displayName: 'Build and Package - Service Fabric Config'
      inputs:
        solution: '**\*.sfproj'
        msbuildArchitecture: x64
        platform: '$(Build.PlatformX64)'
        configuration: '$(Build.Configuration)'
        msbuildArguments: '/t:Package /p:PackageLocation=$(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage  /p:version=$(Build.BuildNumber) /p:FileVersion=$(Build.BuildNumber) -p:SkipInvalidConfigurations=true'
        clean: false
        maximumCpuCount: true
        restoreNugetPackages: false
        logProjectEvents: true
        createLogFile: true

#********************************************************************************
# Copy Files into Aftifact Folder before test.
#********************************************************************************   
    - task: DeleteFiles@1
      displayName: 'Delete Symbols files from $(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage '
      inputs:
        SourceFolder: '$(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage'
        Contents: '**\*.pdb'
    
    - task: CopyFiles@2
      displayName: 'Copy Nuget Interface Packages Files - Artifact NugetInterface Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)\src'
        Contents: |
             **\*$(Build.Configuration)*\*Interface.nupkg
             !**\packages\**
             !**\bin\x64\**
        TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Interface'
        CleanTargetFolder: true
        flattenFolders: true
    
    - task: CopyFiles@2
      displayName: 'Copy NugetPackages Files - Artifact NugetPackages Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)\src'
        Contents: |
             **\*$(Build.Configuration)*\*.nupkg
             !**\packages\**
             !**\bin\x64\**
        TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Packages'
        CleanTargetFolder: true
        flattenFolders: true
            
    - task: CopyFiles@2
      displayName: 'Copy Database Files - Artifact Databases Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: |
             **\*.Database\**\*.dacpac
        TargetFolder: '$(build.artifactstagingdirectory)\Databases'
        CleanTargetFolder: true
        flattenFolders: true
            
    - task: CopyFiles@2
      displayName: 'Copy Files - ServiceFabric - ApplicationParameters'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)\src'
        Contents: '**\ApplicationParameters\*.xml'
        TargetFolder: '$(build.artifactstagingdirectory)\ServiceFabric\ApplicationParameters'
        CleanTargetFolder: true
        flattenFolders: true
    
    - task: ServiceFabricUpdateManifests@2
      displayName: 'Update Service Fabric Manifests (Manifest versions)'
      inputs:
        applicationPackagePath: '$(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage '
        versionBehavior: Replace

#********************************************************************************
# Count Artifact Files to decide what to Publish
#********************************************************************************    
    - task: PowerShell@2
      displayName: 'Check What to Publish'
      continueOnError: true  
      inputs:
        targetType: 'inline'
        script: |
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_ServiceFabric]$(Test-Path '$(build.artifactstagingdirectory)\ServiceFabric' -PathType Any)";
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_NugetPackages]$(Test-Path '$(build.artifactstagingdirectory)\Nuget' -PathType Any)";
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_Databases]$(Test-Path '$(build.artifactstagingdirectory)\Databases' -PathType Any)";

#********************************************************************************
# Run Unit Tests
#********************************************************************************
    - task: DotNetCoreCLI@2
      displayName: 'Run xUnit Test - Core Framework'
      inputs:
        command: test
        projects: 'src/*Tests/*.csproj'
        arguments: '--configuration $(Build.Configuration) --collect "Code coverage"'
        
#********************************************************************************
# Publish Artifacts
#********************************************************************************    
    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      enabled: false
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
        PublishSymbols: false
      continueOnError: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ServiceFabric'
      condition: and(succeeded(), eq(variables['PublishArtifact_ServiceFabric'], 'True'))
      inputs:
        ArtifactName: ServiceFabric
        PathtoPublish: '$(build.artifactstagingdirectory)\ServiceFabric'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: NugetPackages'
      condition: and(succeeded(), eq(variables['PublishArtifact_NugetPackages'], 'True'))
      inputs:
        ArtifactName: NugetPackages
        PathtoPublish: '$(build.artifactstagingdirectory)\Nuget'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Databases'
      condition: and(succeeded(), eq(variables['PublishArtifact_Databases'], 'True'))
      inputs:
        ArtifactName: Databases
        PathtoPublish: '$(build.artifactstagingdirectory)\Databases'
